# /etc/skel/.bashrc
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# if we have an original file
if [ -f ~/.bashrc_orig ]; then
	source ~/.bashrc_orig
fi
unset command_not_found_handle

# Put your fun stuff here.

function editor()
{
	E=gvim
	[[ -z $DISPLAY ]] && E=vim
	$E $* > /dev/null 2>&1
}

function notify()
{
	[ -n "$*" ] && echo -ne "\e]0;$*\a"
	echo -ne "$*...\a"
	read
}

function share()
{
	scp "$1" komar@komar.be:/var/www/space.komar.be/htdocs/
	echo http://space.komar.be/`basename "$1"`
}

export EDITOR="vim"
alias vi='editor'
alias ls="ls --color=always"
alias grep="grep --colour=always"
alias e="e -F"
alias t="ps -p $$ -o start_time"
for prog in kicad pcbnew eeschema oowriter ooimpress oocalc oobase oodraw audacity libreoffice; do
	alias $prog="GTK2_RC_FILES=/usr/share/themes/Default/ $prog"
done

alias pdf1="qpdfview --unique --instance pdf1"
alias pdf2="qpdfview --unique --instance pdf2"
alias pdf3="qpdfview --unique --instance pdf3"

if [ -f /usr/share/mc/mc.gentoo ]; then
	. /usr/share/mc/mc.gentoo
fi

[[ -f /etc/profile.d/bash-completion.sh ]] && source /etc/profile.d/bash-completion.sh
# suppress tilde-expansion
_expand()
{
    return 0;
}

~/.vim/bundle/gruvbox/gruvbox_256palette.sh

# predicates
p_is_git='-n "$(git rev-parse --git-dir 2> /dev/null)"'
p_is_ssh='"$(pstree -clspA $BASHPID | head -n 1)" =~ sshd.+\($BASHPID\)'
p_cmd_ok='$? -eq 0'
# strings
p_git_branch='$(git rev-parse --abbrev-ref HEAD 2>/dev/null)'
p_git_desc='$(git describe 2>/dev/null)'

function p_if_else()
{
	cond=$1
	yes=$2
	no=$3
	echo -n "\$(if [[ $cond ]]; then echo -n "'"'"$yes"'"'"; else echo -n "'"'"$no"'"'"; fi)"
}
function p_if()
{
	p_if_else "$1" "$2" ""
}

function p_token()
{
	prefix=$1
	str=$2
	suffix=$3
	quoted='"'$str'"'
	p_if "-n $quoted" "$prefix$str$suffix"
}
function p_set_title()
{
	title="$*"
	echo -n "\[\e]0;$title\a\]"
}

function get_ps1()
{
	GRAY='\[\e[00;30m\]'
	LRED='\[\e[00;31m\]'
	RED='\[\e[01;31m\]'
	BLUE='\[\e[01;34m\]'
	GREEN='\[\e[01;32m\]'
	LGREEN='\[\e[00;32m\]'
	CYAN='\[\e[01;36m\]'
	YELLOW='\[\e[01;33m\]'
	RESET='\[\e[00m\]'

	prev_status="$(p_if_else "$p_cmd_ok" '✔' "$LRED\$?$RESET")"
	ssh_tag="$(p_if "$p_is_ssh" $YELLOW'ssh:'$RESET)"
	branch_token="$(p_token "$GRAY─┤$RED" "$p_git_branch" "$GRAY├$RESET")"
	title="\\w $(p_if "$p_is_git" "on $p_git_branch")"

	twoline="$(p_set_title $title)"
	twoline+="$GRAY┌──┤$prev_status$GRAY├$branch_token$GRAY─╴[$BLUE\w$GRAY]$RESET\n"
	twoline+="$GRAY└╴$GREEN\u$GRAY@$ssh_tag$LGREEN\h"
	twoline+=" $BLUE\W \\\$$RESET "

	echo -e "$twoline"
}
PS1=$(get_ps1)
