# /etc/skel/.bashrc
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# if we have an original file
if [ -f ~/.bashrc_orig ]; then
	source ~/.bashrc_orig
fi
unset command_not_found_handle

# Put your fun stuff here.

function editor()
{
	E=gvim
	[[ -z $DISPLAY ]] && E=vim
	$E $* > /dev/null 2>&1
}

function share()
{
	scp "$1" komar@komar.be:/var/www/space.komar.be/htdocs/
	echo http://space.komar.be/`basename "$1"`
}

# avoid multiple aliasing
unalias vi ls grep e t pdf1 pdf2 pdf3 less tig 2>/dev/null

export EDITOR="nvim"
alias vi='editor'
alias ls="ls --color=always"
alias grep="grep --colour=always"
alias e="e -F"
alias t="ps -p $$ -o start_time"
alias notify="~/.desktop_config/bash/notify.sh"
for prog in kicad pcbnew eeschema oowriter ooimpress oocalc oobase oodraw audacity libreoffice; do
	alias $prog="GTK2_RC_FILES=/usr/share/themes/Default/ $prog"
done

alias pdf1="qpdfview --unique --instance pdf1"
alias pdf2="qpdfview --unique --instance pdf2"
alias pdf3="qpdfview --unique --instance pdf3"

function less_set_title()
{
	dir="$(pwd)"
	echo -e "\e];less $@ [$dir]\a"
	less "$@"
}
alias less="less_set_title"

function tig_set_title()
{
	dir="$(dirname "$(cd "$(git rev-parse --git-dir 2> /dev/null)"; pwd)")"
	branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
	if [ -n "$branch" ]; then
		dir+=" on $branch"
	fi
	title="tig"
	argline="$@"
	if [ -n "$argline" ]; then
		title+=" $argline"
	fi
	echo -e "\e];$title [$dir]\a"
	tig "$@"
}
alias tig="tig_set_title"

if [ -f /usr/share/mc/mc.gentoo ]; then
	. /usr/share/mc/mc.gentoo
fi

[[ -f /etc/profile.d/bash-completion.sh ]] && source /etc/profile.d/bash-completion.sh
# suppress tilde-expansion
_expand()
{
	return 0;
}


export LESS_TERMCAP_mb=$'\E[1;31m'   # blink
export LESS_TERMCAP_md=$'\E[1;32m'   # bold
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[7m'      # standout
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[1;4;34m' # underline

# predicates
p_is_git='[[ -n "$(git rev-parse --git-dir 2> /dev/null)" ]]'
p_is_git_clean='git diff-index --quiet HEAD --'
p_is_ssh='[[ "$(pstree -clspA $BASHPID | head -n 1)" =~ sshd.+\($BASHPID\) ]]'
p_cmd_ok='[[ $? -eq 0 ]]'
# strings
p_git_branch='$(git rev-parse --abbrev-ref HEAD 2>/dev/null)'
p_git_desc='$(git describe 2>/dev/null)'
p_time='$(date +%H:%M:%S)'

function p_if_else()
{
	cond=$1
	yes=$2
	no=$3
	echo -n "\$(if $cond; then echo -n "'"'"$yes"'"'"; else echo -n "'"'"$no"'"'"; fi)"
}
function p_if()
{
	p_if_else "$1" "$2" ""
}

function p_token()
{
	prefix=$1
	str=$2
	suffix=$3
	quoted='"'$str'"'
	p_if "-n $quoted" "$prefix$str$suffix"
}
function p_set_title()
{
	title="$*"
	echo -n "\[\e]0;$title\a\]"
}
function p_right()
{
	cmd="$*"
	echo -n "\[\e7\r\e[\$[\$COLUMNS-\$(wc -c <<< $cmd)+1]C$cmd\e8\]"
}

function get_ps1()
{
	if grep -q rxvt <<< "$TERM"; then
		PLUS=+
		MINUS=-
	else
		PLUS=" "
		MINUS=" "
	fi

	GRAY='\[\e[00;30m\]'
	BLINKRED='\[\e[5;31m\]'
	RED='\[\e[01;31m\]'
	BLUE='\[\e[01;34m\]'
	GREEN='\[\e[01;32m\]'
	LGREEN='\[\e[00;32m\]'
	CYAN='\[\e[01;36m\]'
	YELLOW='\[\e[01;33m\]'
	LYELLOW='\[\e[00;33m\]'
	RESET='\[\e[00m\]'

	p_git_stats='$(git diff-index  --shortstat  HEAD -- 2>/dev/null | sed -r "s/[^,]+, ([0-9]+)[^,]+(, ([0-9]+).*)?/ '$GREEN$PLUS'\1 '$RED$MINUS'\3/")'

	prev_status="$(p_if_else "$p_cmd_ok" '󰸞' "$BLINKRED\$?$RESET")"
	ssh_tag="$(p_if "$p_is_ssh" $YELLOW'ssh:'$RESET)"
	branch_token="$(p_if "$p_is_git" "${YELLOW}⎇ ${LYELLOW}$p_git_branch$GRAY$p_git_stats$RESET ")"
	right_tag="$(p_right "$p_time")"
	title="\\w $(p_if "$p_is_git" "on $p_git_branch")"

	ssh_tag=$(eval echo $ssh_tag) # needs to be evaluated just once

	twoline=""
	twoline+="$GREEN░ $prev_status$GRAY $branch_token$GRAY$BLUE\w$GRAY$right_tag$RESET\n"
	twoline+="$GREEN░ $GREEN\u$GRAY@$ssh_tag$LGREEN\h"
	twoline+=" $BLUE\W \\\$$RESET $(p_set_title $title)"

	echo -e "$twoline"
}
PS1=$(get_ps1)

export GDK_DPI_SCALE=1.6
export PATH=$PATH:~/.cargo/bin:~/.npm-global/bin/:~/.local/bin
