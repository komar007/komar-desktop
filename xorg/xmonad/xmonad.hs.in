#include <xmonad.rc>

import System.IO
import System.Exit (exitSuccess)
import qualified Data.Map as M
import Data.Ratio ((%))
import XMonad
import XMonad.ManageHook
import XMonad.Hooks.SetWMName
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.DynamicHooks
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.UrgencyHook
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
import XMonad.Util.XSelection
import XMonad.Util.Loggers
import XMonad.StackSet as W hiding(layout, workspaces)
import XMonad.Layout.NoBorders
import XMonad.Layout.WorkspaceDir
import XMonad.Layout.Renamed
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Gaps
import XMonad.Layout.IM
import XMonad.Layout.Grid
import XMonad.Layout.Reflect
import XMonad.Layout.Tabbed
import XMonad.Layout.MagicFocus
import XMonad.Layout.SimplestFloat
import XMonad.Layout.LayoutScreens
import XMonad.Layout.TwoPane
import qualified XMonad.Layout.HintedTile as H
import qualified XMonad.Layout.ResizableTile as R
import XMonad.Prompt
import XMonad.Prompt.Shell
import XMonad.Prompt.Workspace
import XMonad.Actions.Search
import XMonad.Actions.DynamicWorkspaces
import XMonad.Actions.Plane
import XMonad.Actions.PhysicalScreens
import XMonad.Actions.WindowBringer
import XMonad.Actions.GridSelect
import XMonad.Actions.Promote
import XMonad.Actions.NoBorders
import XMonad.Actions.CycleWS
import XMonad.Actions.SpawnOn
import XMonad.Actions.TopicSpace
import XMonad.Actions.DynamicWorkspaceGroups
-- for MyDzenUrgencyHook
import XMonad.Util.NamedWindows (getName)
import XMonad.Util.Dzen (dzenWithArgs, seconds)
import XMonad.Util.WorkspaceCompare

import XMonad.Prompt.Input

browser = BROWSER_CMD

golden = toRational (((sqrt 5) - 1)/2)

tall ratio numMaster = R.ResizableTall numMaster delta ratio []
    where delta = (3/100)

myTall r n = named "tall" $ tall r n
myWide r n = named "wide" $ Mirror $ tall r n
myFull     = named "full" $ noBorders (tabbedBottom shrinkText tabTheme)
mySimpleFull  = named "full" $ noBorders Full

defaultSet r n =
    myTall r n ||| myWide r n ||| myFull
defaultMSet r n =
    myWide r n ||| myTall r n ||| myFull
defaultWSet r n =
    myFull   ||| myTall r n ||| myWide r n
defaultVSet r n =
    mySimpleFull ||| myTall r n ||| myWide r n

webSpaces = ["web1", "web2"]

-- FIXME dynamically create workspacedirs from topics configuration
myLayoutHook = workspaceDir "~" $ smartBorders $
    (onWorkspaces webSpaces $ avoidStruts web) $
    (onWorkspace "mail" $ avoidStruts web) $
    (onWorkspace "temp" $ norm 0.5 2) $
    (norm golden 1)
    where
    web      = defaultWSet golden 1
    norm r n = avoidStruts $ defaultSet r n

#ifdef CONFIG_WORK
iconDir = "/home/komar/.xmonad/dzen2_img_small/"
#else
iconDir = "/home/komar/.xmonad/dzen2_img_large/"
#endif

wrapSpace = wrap "^p(8)" "^p(1)"
preIcon i = wrap ("^i(" ++ iconDir ++ i ++ ")") "^p(1)"

layoutNameToIcon n = "^i(" ++ iconDir ++ "lay" ++ n ++ ".xbm)"

myLogHook pipe = dynamicLogWithPP $ dzenPP {
    ppSort    = fmap (.filterOutWs [scratchpadWorkspaceTag]) $ wsSorter,
    ppOutput  = hPutStrLn pipe,
    ppTitle   = dzenColor "#5d728d" "" . shorten 100,
    ppCurrent = dzenColor "#719e4b" "#333333" . preIcon "dcur.xbm",
    ppUrgent  = dzenColor "#a53333" "" . preIcon "durg.xbm" . dzenColor "#666666" "" . dzenStrip,
    ppVisible = dzenColor "#719e4b" "#252525" . preIcon "dvis.xbm",
    ppHidden  = dzenColor "#444444" "" . wrapSpace,
    ppWsSep   = "^p(2)",
    ppSep     = dzenColor "#aaaaaa" "" "^p(3)|^p(3)",
    ppLayout  = dzenColor "#c0712c" "" . layoutNameToIcon
} where
    wsSorter = getSortByXineramaPhysicalRule horizontalScreenOrderer

scratchpads = [
    NS "scratchpad"     "~/.xmonad/terminal.sh scratchpad"
        (resource =? "scratchpad")   (terminalFloating 0 0.5 1 0.5),
    NS MIXER_CMD ("~/.xmonad/terminal.sh scratchmixer " ++ MIXER_CMD)
        (resource =? "scratchmixer") (terminalFloating 0.15 0 0.7 0.3),
    NS "bc"        "~/.xmonad/terminal.sh bc bc -l"
        (resource =? "bc")           (terminalFloating 0.7 0.2 0.3 0.6),
    NS "notepad"   "~/.xmonad/terminal.sh notepad ~/.xmonad/notepad.sh"
        (resource =? "notepad")      (terminalFloating 0.3 0.2 0.4 0.6)]
    where terminalFloating x y w h = customFloating $ W.RationalRect x y w h

myScratchpadManageHook = namedScratchpadManageHook scratchpads
myManageHook = myScratchpadManageHook <+> manageDocks <+> myConditions <+> manageHook def
myConditions = composeAll [
    resource  =? "tempterm"   --> doF (W.shift "temp"),
    isMail                    --> doF (W.shift "mail"),
    isFullscreen              --> doFullFloat]
    where isMail = className =? "Thunderbird"

guiFont = xstr(XMONAD_FONT)

tabTheme = def {
    fontName             = guiFont,
    activeColor          = "#111111",
    inactiveColor        = "#000000",
    urgentColor          = "#222222",
    activeBorderColor    = "#5d728d",
    inactiveBorderColor  = "#5d728d",
    urgentBorderColor    = "#dd0000",
    activeTextColor      = "#c4a000",
    inactiveTextColor    = "#aaaaaa",
    urgentTextColor      = "#dd0000",
    decoHeight           = HEIGHT
}

xpconfig = def {
    font        = guiFont,
    bgColor     = "#000000",
    fgColor     = "#aaaaaa",
    bgHLight    = "#cccccc",
    fgHLight    = "#000000",
    promptBorderWidth = 0,
    height = HEIGHT
}

data TopicItem = TI { topicName :: Topic   -- (22b)
                    , topicDir  :: Dir
                    , topicAction :: X ()
                    }

myTopics :: [Main.TopicItem]
myTopics =
    [ ti "NSP"   "~"
    , ti "c1"    "/home/komar"
    , ti "d1"    "/home/komar"
    , ti "c2"    "~"
    , ti "d2"    "~"
    , ti "c3"    "~"
    , ti "d3"    "~"
    , ti "sys1"  "~"
    , ti "ds1"   "~"
    , ti "sys2"  "~"
    , ti "ds2"   "~"
    , Main.TI "web1"  "~/Pobrania"
        (spawnHere browser)
    , Main.TI "web2"  "~/Pobrania"
        (spawnHere browser)
    , ti "mail"  "~"
    , ti "vm1"  "~/VMs"
    , ti "vm2"  "~/VMs"
    ]
    where
        ti t d = Main.TI t d shell
        shell = spawnHere "~/.xmonad/terminal.sh terminal"
        shellRemote host cmd = spawnHere $ "~/.xmonad/terminal.sh terminal -e ssh " ++ host ++ " -t " ++ cmd

myTopicNames :: [Topic]
myTopicNames = map topicName myTopics

myTopicConfig :: TopicConfig
myTopicConfig = def
    { topicDirs = M.fromList $ map (\(Main.TI n d _) -> (n,d)) myTopics
    , defaultTopicAction = const (return ())
    , defaultTopic = "web1"
    , topicActions = M.fromList $ map (\(Main.TI n _ a) -> (n,a)) myTopics
    }

myConf xmproc =
    docks $
    def {
        startupHook = setWMName "LG3D",
        manageHook = manageSpawn <+> myManageHook <+> dynamicMasterHook,
        layoutHook = myLayoutHook,
        logHook = myLogHook xmproc,
        focusFollowsMouse = False,
        modMask = mod4Mask,
        normalBorderColor = "#000000",
        focusedBorderColor = "#3465a4",
        terminal = "~/.xmonad/terminal.sh terminal",
        workspaces = myTopicNames,
        clickJustFocuses = True
} `additionalKeysP` (myKeys xmproc)

data MyDzenUrgencyHook = MyDzenUrgencyHook {
                             duration :: Int,
                             args :: [String]
                         }
    deriving (Read, Show)

instance UrgencyHook MyDzenUrgencyHook where
    urgencyHook MyDzenUrgencyHook { Main.duration = d, Main.args = a } w = do
        name <- getName w
        ws <- gets windowset
        whenJust (W.findTag w ws) (flash name)
      where flash name index =
                  dzenWithArgs (dzenColor "#a53333" "" index ++ dzenColor "#444444" "" ": " ++ dzenColor "#5d728d" "" (show name)) a d

myDzenUrgencyHook :: MyDzenUrgencyHook
myDzenUrgencyHook = MyDzenUrgencyHook {Main.duration = seconds 1, Main.args = [
    "-bg", "black",
    "-xs", "2",
    "-ta", "r",
    "-fn", "-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*",
    "-x", "830"
]}

myBlinkUrgencyHook :: SpawnUrgencyHook
myBlinkUrgencyHook = SpawnUrgencyHook "~/.xmonad/blink.sh "

main = do
    checkTopicConfig myTopicNames myTopicConfig
    xmproc <- spawnPipe $ "bash ~/.xmonad/xmonad_pipe.sh"
    xmonad
        $ withUrgencyHookC myDzenUrgencyHook def {remindWhen = Every 2}
        $ withUrgencyHook myBlinkUrgencyHook
        $ myConf xmproc

workspaceKeys = ["", "M-1", "M-<F1>", "M-2", "M-<F2>", "M-3", "M-<F3>", "M-4", "M-<F4>", "M-5", "M-<F5>",
    "M-6", "M-7", "M-u", "M-<F9>", "M-<F10>"]
workspaceSKeys = map ("S-"++) workspaceKeys

-- Workaround for toggle + scratchpad
myToggle = windows $ W.view =<< W.tag . head . Prelude.filter ((\x -> x /= "NSP" && x /= "SP") . W.tag) . W.hidden

myKeys xmproc = [
    ("M-m",               spawn "if type xmonad; then xmonad --recompile && xmonad --restart; else xmessage xmonad not in \\$PATH: \"$PATH\"; fi"),
    ("M-S-m",             io exitSuccess),
    ("M-q",               viewScreen def 0),
    ("M-w",               viewScreen def 1),
    ("M-e",               viewScreen def 2),
    ("M-S-q",             sendToScreen def 0),
    ("M-S-w",             sendToScreen def 1),
    ("M-S-e",             sendToScreen def 2),
    ("M-S-f",             spawn ("~/.xmonad/fix_noppoo.sh")),
    ("M-`",               workspacePrompt xpconfig (windows . W.view)),
    ("M-S-`",             workspacePrompt xpconfig (windows . W.shift)),
    ("M-p",               shellPromptHere xpconfig),
    ("M-s",               namedScratchpadAction scratchpads "scratchpad"),
    ("M-a",               namedScratchpadAction scratchpads MIXER_CMD),
    ("M-x",               namedScratchpadAction scratchpads "bc"),
    ("M-c",               namedScratchpadAction scratchpads "notepad"),
    ("M-d",               changeDir xpconfig),
    ("M-;",               sendMessage R.MirrorShrink),
    ("M-'",               sendMessage R.MirrorExpand),
    ("M-<Esc>",           goToSelected def),
    ("M-<Return>",        promote),
    ("M-b",               sendMessage ToggleStruts),
    ("M-g n",             promptWSGroupAdd xpconfig "name group: "),
    ("M-g g",             promptWSGroupView xpconfig "go to group: "),
    ("M-g d",             promptWSGroupForget xpconfig "drop group: "),
#ifndef CONFIG_WORK
    ("M-f",               layoutScreens 2 (TwoPane 0.5 0.5)),
    ("M-v",               rescreen),
#endif
    ("M-S-<Backspace>",   do
                              focusUrgent
                              spawnHere "~/.xmonad/noblink.sh"
                              ),
    ("M-S-<Return>",      currentTopicAction myTopicConfig),
    ("M-<Backspace>",     myToggle)]
    ++
    [(sc, withNthWorkspace W.greedyView n) | (sc, n) <- zip workspaceKeys [0..]]
    ++
    [(sc, withNthWorkspace W.shift n) | (sc, n) <- zip  workspaceSKeys [0..]]
    ++
    [(mod ++ sc, func (Lines 1) Linear dir) |
        (sc, dir) <- [("[", ToLeft), ("]", ToRight)],
        (mod, func) <- [("M-", planeMove), ("M-S-", planeShift)]]
