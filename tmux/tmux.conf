# Basic settings
# ==============

set -s escape-time 0
# Alacritty terminal features: 24-bit color & underline style passthrough
set -sa terminal-features "alacritty:RGB:usstyle"

set -g mouse on
set -g base-index 1
set -g renumber-windows on
set -g word-separators ' '
set -g history-limit 32000
set -g status-position top
set -g status-interval 10
set -g display-time 5000
set -g set-titles on
set -g set-titles-string '[tmux] #{pane_title}'

set -wg mode-keys vi


# Key bindings
# ============

# Rationale behind the C-s prefix:
# - the default C-b is backwards one character in emacs, and I use that in readline, so it's
#   unacceptable,
# - I've tried C-w, because w stands for "window", and that also nicely integrates with vim's
#   window management, but C-w is "erase word", and I found it hard to live without it (tried
#   C-w C-w / C-w w for a while and couldn't get used to it),
# - screen's default C-a is unacceptable, because it is "go to beginning of line" in
#   readline/emacs,
# - in the end I settled on C-s, which is easy enough to press with the left hand on qwerty,
#   and it only overrides no scroll, which I use extremely rarely; an added benefit is that barely
#   any terminal app will use it for anything useful, because if its original unix meaning.
set -g prefix C-s
# prefix C-s is bound to C-s as a fallback to be able to freeze the terminal when absolutely
# necessary
bind C-s send-keys C-s

# reloading config
bind R source ~/.tmux.conf

# move the status bar up and down
bind -n F10 set-window-option status-position

# copy-mode with vim-like behavior
# --------------------------------

bind [ copy-mode
# some emacs/readline-like motions
bind -T copy-mode-vi C-a send-keys -X start-of-line
bind -T copy-mode-vi C-e send-keys -X end-of-line
bind -T copy-mode-vi C-b send-keys -X cursor-left
bind -T copy-mode-vi C-f send-keys -X cursor-right
# rectangle selection
bind -T copy-mode-vi C-v \
    send-keys -X begin-selection \; \
    send-keys -X rectangle-toggle
# regular selection
bind -T copy-mode-vi v send-keys -X begin-selection
# copy selection to tmux buffer and X selection
bind -T copy-mode-vi y \
    send-keys -X pipe-no-clear "xsel -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -" \; \
    send-keys -X cancel
# paste selection to terminal and quit copy mode
bind -T copy-mode-vi p \
    send-keys -X pipe "tmux load-buffer -b temp -" \; \
    send-keys -X cancel \; \
    run "sleep 0.1" \; \
    paste-buffer -drb temp
# copy mouse selection to tmux buffer and X selection
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X pipe-no-clear "xsel -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -"
# copy word to tmux buffer and X selection
bind -n DoubleClick1Pane \
    copy-mode -M \; \
    send-keys -X select-word \; \
    run "sleep 0.15" \; \
    send-keys -X pipe-no-clear "xsel -i --primary" \; \
    send-keys -X pipe "tmux load-buffer -" \; \
    send-keys -X cancel
bind -n MouseDown2Pane run-shell -b " tmux send-keys -l -- \"\$(xsel -o --primary)\""
bind -T copy-mode-vi r send-keys -X rectangle-toggle
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

bind -n M-s 'copy-mode ; command-prompt -T search -i -p "search up" "send -X search-backward-incremental \"%%%\""'

# session management
# ------------------

# sessions are not maintained in any defined order, so there's no point going back and forth...
unbind (
unbind )

# ...jumping to last used session, however, makes perfect sense
bind - switch-client -l # last-used session
bind \uE100 switch-client -l # ...also, because Shift may remain pressed (\uE100 bound to Ctrl + "-" in alacritty)

# fzf session selector
# TODO: try to sort by last attached from CURRENT client
%hidden SESSION_LIST="\
tmux list-sessions -F \"##{session_activity} ##{session_name} ##{session_windows} win\" \
     | sort -rn"
%hidden TMUX_SESSION_LIST="\
fzf-tmux -p100%,100% -- \
    --with-nth=2.. \
    --padding=0% \
    --margin=0% \
    --preview-window=down,80%,nowrap,border-top\
    --preview 'tmux capture-pane -pet {2}: | tail -n \$(tput lines)' \
"
bind _ run-shell -b "\
    new_ses=\$($SESSION_LIST | $TMUX_SESSION_LIST | cut -d' ' -f 2); \
    [ -n \"\$new_ses\" ] && tmux switch-client -t \"\$new_ses\" || true \
"

# regular session selector
bind w choose-tree -wsZ

# change session working directory, very much WiP - the prompt supports no completion:(
bind a command-prompt -T command -p "cd" "attach-session -t . -c \"%%%\""

# moving between windows
# ----------------------

# new window
%hidden SPAWN_SHELL="\
if [ -x ~/shell.sh ]; then \
    session=\$(tmux display-message -pF \"#S\"); \
    ~/shell.sh \"\$session\"; \
else \
    \"\$SHELL\"; \
fi \
"
bind c new-window -a -c "#{pane_current_path}" "$SPAWN_SHELL" # "clone window": open to the right, with current pane's cwd
bind C new-window "$SPAWN_SHELL" # classical new window: open as the last one, with session's cwd

# select first and last-used window
bind -n \uE101 select-window -t:1 # bound to Ctrl + m in alacritty
bind -n \uE100 last-window # bound to Ctrl + "-" in alacritty

# window ++, --
bind -n C-k previous-window
bind -n C-j next-window

# moving windows
bind -n C-Up   swap-window -t -1 -d # fallback
bind -n \uE104 swap-window -t -1 -d # bound to Ctrl + Shift + k in alacritty
bind -n C-Down swap-window -t +1 -d # fallback
bind -n \uE103 swap-window -t +1 -d # bound to Ctrl + Shift + j in alacritty

# splits - more like in vim, but with prefix, instead C-w
unbind \"
unbind \%
bind s split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# fix pgup/pgdn to be like in most terminals
bind -n S-Pageup copy-mode -u
bind -n S-Pagedown send-keys Pagedown

# Scrollback buffer scrapers
# --------------------------

%hidden TMP_CAPTURE=/tmp/tmux_capture
%hidden TMP_CAPTURE_BARE=/tmp/tmux_capture.bare
%hidden BAT_HIGHLIGHT="bat --theme gruvbox-dark --color=always --decorations never"
%hidden FZF_SCRAPER_SELECT="\
fzf-tmux -p100%,100% \
    --with-nth=2.. \
    --padding=0% \
    --margin=0% \
    --preview \" \
        grep -Fn -- \"{2..}\" $TMP_CAPTURE_BARE \
        | cut -d: -f1 \
        | sed 's/^/-H /' \
        | xargs $BAT_HIGHLIGHT $TMP_CAPTURE \
    \" \
    --preview-window=up,80%,nowrap,border-bottom,+{1}+1/1 \
    --bind \"ctrl-y:execute(tmux set-buffer {2} && echo {2} | xsel -i --primary)\" \
    | cut -d' ' -f 2- \
"
%hidden UNIQ_STABLE="awk '!seen[\$0]++'"
%hidden REVERSE_UNIQ="tac | $UNIQ_STABLE"

%hidden GREP_N_BEGIN="grep -Ev '^.?|^  \\$ +$' | grep --color=none -onE"
%hidden GREP_N_END="| sed 's/:/ /'"
# Scraping qualifiers
%hidden FIND_URLS="$GREP_N_BEGIN 'https?:\/\/[^][ ^<>]+' $GREP_N_END | $REVERSE_UNIQ"
%hidden FIND_WORDS="$GREP_N_BEGIN '[^][ \t]+' $GREP_N_END | $REVERSE_UNIQ"
%hidden FIND_BIG_WORDS="$GREP_N_BEGIN '[^ \t]+' $GREP_N_END | $REVERSE_UNIQ"

# Enter-actions
%hidden OPEN_URL="\
    xargs xdg-open \
    > /dev/null 2>&1 \
    || true \
"
%hidden PASTE_RESULT="\
    xargs tmux send-keys -l -- \
    || true \
"

# FIXME: FINDERS or CAPTURERS don't work inside reload() :(
%hidden ADD_BINDS_FOR_REGEX_SELECTOR="\
    --bind \\\"f1:reload:cat $TMP_CAPTURE_BARE | $FIND_URLS\\\" \
    --bind \\\"f2:reload:cat $TMP_CAPTURE_BARE | $FIND_WORDS\\\" \
    --bind \\\"f3:reload:cat $TMP_CAPTURE_BARE | $FIND_BIG_WORDS\\\" \
"

%hidden CAPTURE_PANE="tmux capture-pane -eJp > $TMP_CAPTURE && tmux capture-pane -Jp | tee $TMP_CAPTURE_BARE"
%hidden CAPTURE_SCROLLBACK="tmux capture-pane -eJp -S- -E- > $TMP_CAPTURE && tmux capture-pane -Jp -S- -E- | tee $TMP_CAPTURE_BARE"

# URL Scraper

# visible part of pane
bind u run-shell -b "$CAPTURE_PANE | $FIND_URLS | $FZF_SCRAPER_SELECT | $OPEN_URL"
# whole history of pane
bind U run-shell -b "$CAPTURE_SCROLLBACK | $FIND_URLS | $FZF_SCRAPER_SELECT | $OPEN_URL"

# Generic Scraper

# visible part of pane
bind y run-shell -b "$CAPTURE_PANE | $FIND_WORDS | FZF_DEFAULT_OPTS=\"\$FZF_DEFAULT_OPTS $ADD_BINDS_FOR_REGEX_SELECTOR\" $FZF_SCRAPER_SELECT | $PASTE_RESULT"
# whole history of pane
bind Y run-shell -b "$CAPTURE_SCROLLBACK | $FIND_WORDS | FZF_DEFAULT_OPTS=\"\$FZF_DEFAULT_OPTS $ADD_BINDS_FOR_REGEX_SELECTOR\" $FZF_SCRAPER_SELECT | $PASTE_RESULT"

# paste buffers
# -------------

# TODO: get fields from tmux and then format outside of tmux
%hidden LIST_BUFFERS="\
tmux list-buffers -F '%SRC% ##{buffer_name}%RESET% ##{buffer_sample} %DIM%(##{buffer_size} ##{?##{==:##{buffer_size},1},byte,bytes})%RESET%' \
    | sed -e \"s/%DIM%/\$(tput setaf 0)/g\" \
          -e \"s/%SRC%/\$(tput setaf 4)/g\" \
          -e \"s/%RESET%/\$(tput sgr0)/g\" \
"
%hidden FORMAT_X_SEL="sed \"1s/^/\$(tput setaf 1) selection\$(tput sgr0) /\""
%hidden FORMAT_X_CLIP="sed \"1s/^/\$(tput setaf 1) clipboard\$(tput sgr0) /\""

bind p run-shell -b "tmux send-keys -l -- \"\$(xsel -o --primary)\""
bind P run-shell -b "\
    sel=\$( \
        ( \
            xsel -o --primary | $FORMAT_X_SEL; \
            printf '\\0'; \
            $LIST_BUFFERS | head -n 1 | tr -d '\n'; \
            printf '\\0'; \
            xsel -o --clipboard | $FORMAT_X_CLIP; \
            printf '\\0'; \
            $LIST_BUFFERS | tail -n +2 | tr '\n' '\\0' \
        ) \
        | sed -ur \
            -e 's/(\\x0)+/\\1/g' \
            -e '1s/^\\x0//' \
        | fzf-tmux -p 100%,50% -y 9999 -- \
            --ansi \
            --read0 \
        | head -n 1 \
        | cut -d' ' -f 2 \
    ); \
    case \"\$sel\" in \
        '') ;; \
        selection) tmux send-keys -l -- \"\$(xsel -o --primary)\" ;; \
        clipboard) tmux send-keys -l -- \"\$(xsel -o --clipboard)\" ;; \
        *) tmux paste-buffer -b \$sel ;; \
    esac || true \
"

# FIXME: test should be against popup open, not session_name, because changing the session in popup allows for popup inception
%hidden SCRATCH_SESSION_NAME=scratch
bind-key S run-shell "\
    if test 1 -eq #{==:#{session_name},$SCRATCH_SESSION_NAME} ; then \
        tmux detach-client; \
    else \
        old=\$(tmux show-options -gw -v popup-border-style); \
        tmux set -gw popup-border-style fg=green; \
        (tmux popup -xC -yP -w100% -h50% -E \"tmux attach -t $SCRATCH_SESSION_NAME || tmux new -s $SCRATCH_SESSION_NAME\" &); \
        sleep 0.1 && tmux set -gw popup-border-style \"\$old\"; \
    fi\
"

# Look and feel
# =============

set -g status "on"

set -g status-style bg=colour16,fg=white
set -wg window-status-style bg=colour0,fg=colour237
set -wg window-status-activity-style bg=colour237,fg=colour248
set -wg window-status-current-style bg=red,fg=colour237
set -wg pane-active-border-style fg=colour250
set -wg pane-border-style fg=colour237
set -wg clock-mode-colour colour109 #blue
set -wg window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg
set -g message-style bg=colour239,fg=colour223
set -g message-command-style bg=colour239,fg=colour223
set -g display-panes-active-colour colour250
set -g display-panes-colour colour237

set -g status-style "bg=#151515"
set -g status-justify "left"
set -g status-left-style none
set -g status-left-length "80"
set -g status-right-style none
set -g status-right-length "80"
set -wg window-status-separator ""

set -wg popup-border-style "fg=#aaaaaa"

set -g status-left "#[bg=blue,fg=colour16]  #[fg=#6688aa,bg=#556699]▌#[fg=#445588,bg=#334466]▌#[bg=#223355,fg=white] #S #[bg=colour16]"
%hidden SR_TITLE="#[fg=colour240,align=left]▏#{pane_title}"
%hidden SR_GRADIENT2="#[align=right]#[fg=#222222,bg=#333355]▌#[fg=#334466,bg=#445577]▌#[bg=#556688,fg=#000000]"
%hidden SR_TIME="%a %d %b #[fg=#aaaaaa,bold]%H:%M"
%hidden SR_SSH_LABEL="#{?#{!=:#(tmux show-environment SSH_CONNECTION | cut -sd= -f 2-),},#[bold#,fg=colour3]ssh:#[nobold#],}"
set -g status-right "$SR_TITLE$SR_GRADIENT2 $SR_TIME ▏$SR_SSH_LABEL#[fg=#000000]#h "

%hidden WINDOW_FIRE="#[fg=red]#(\
        pidtree_mon --version > /dev/null && pidtree_mon \
            -t 10 \
            -f 'if_greater:0.5: ' \
            \$(tmux list-panes -t #{window_id} -F '\#{pane_pid}')
)"
%hidden WINDOW_MARK="#{?window_marked_flag,#[curly-underscore#,us=blue],}"
%hidden WINDOW_MARK_END="#[nocurly-underscore]"
set -wg window-status-current-format "#[fg=blue,bg=#000000]#{?window_zoomed_flag,▋,▏}#[fg=blue,bold]$WINDOW_MARK#I:#W$WINDOW_MARK_END$WINDOW_FIRE #[bg=colour16,nobold,noitalics,nounderscore]"
set -wg window-status-format "#{?window_bell_flag,#[bg=#331111#,fg=red#,bold],#[fg=colour240#,bg=#272727]}#{?window_zoomed_flag,▋,▏}#[fg=white]$WINDOW_MARK#I#[fg=colour243]#{?window_last_flag,#[italics]-,:}#[fg=#666666]#W$WINDOW_MARK_END$WINDOW_FIRE #[bg=colour16,fg=colour236,noitalics]"

set -wg pane-active-border-style bg=default,fg=blue
set -wg pane-border-style fg=colour237

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Except true vim binds
# ======================================================

%hidden is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?\$'"
bind h   if-shell "$is_vim" 'send-keys C-w h' 'select-pane -L'
bind C-h if-shell "$is_vim" 'send-keys C-w h' 'select-pane -L'
bind j   if-shell "$is_vim" 'send-keys C-w j' 'select-pane -D'
bind C-j if-shell "$is_vim" 'send-keys C-w j' 'select-pane -D'
bind k   if-shell "$is_vim" 'send-keys C-w k' 'select-pane -U'
bind C-k if-shell "$is_vim" 'send-keys C-w k' 'select-pane -U'
bind l   if-shell "$is_vim" 'send-keys C-w l' 'select-pane -R'
bind C-l if-shell "$is_vim" 'send-keys C-w l' 'select-pane -R'
bind l   if-shell "$is_vim" 'send-keys C-w l' 'select-pane -R'
bind \\  if-shell "$is_vim" 'send-keys C-w BSpace' 'last-pane'

bind -T copy-mode-vi C-w switch-client -T copy-mode-vi-prefix
bind -T copy-mode-vi-prefix h select-pane -L
bind -T copy-mode-vi-prefix j select-pane -D
bind -T copy-mode-vi-prefix k select-pane -U
bind -T copy-mode-vi-prefix l select-pane -R
bind -T copy-mode-vi-prefix \\ select-pane -l
